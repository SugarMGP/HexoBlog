<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cube 开发踩坑实录（一）：为啥我的图片是歪的</title>
    <link href="/2025/09/16/cube-1st/"/>
    <url>/2025/09/16/cube-1st/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>精弘存储立方</strong>（简称 Cube）是我们内部自研的对象存储中间件，支持对<strong>传统文件系统</strong>和 <strong>AWS S3</strong> 进行连接和操作，为我们其他项目提供了高效统一的对象存储服务。在此之外，我们也根据实际业务需求提供了许多<strong>针对图片的特殊功能</strong>，例如 Webp 转码存储和缩略图功能等。</p><p>然而在开发这些图片功能的过程中，踩过的坑真是数不胜数，正好写两篇博客分享一下这些有趣的问题和最终的解决方法。</p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>在论坛上线测试服之后，一位用户在发布广东美食相关的帖子时，所拍摄的<strong>图片方向完全错掉</strong>了，用户需要旋转自己的脖子才能看到正确的图像。</p><p><img src="/img/cube-1st/1.png" alt="奇异搞笑的图片方向"></p><p>在经过一轮测试后，我们发现这个问题只会出现在<strong>苹果设备</strong>拍摄的照片上，而在其他设备上则没有问题。</p><p>一开始我只以为是苹果拍摄时的方向策略有问题，所以并没有太放在心上，毕竟图片上传的逻辑就是原样传上去然后送到 Cube 进行转码存储，不应该会在这上面出问题。</p><p>直到技术面试那天我和毛衣闲聊时，偶然提到<strong>图片元数据</strong>这个点，才想起问题出在哪：</p><p>苹果系统拍照后会把图像朝向信息存储在 <strong>EXIF</strong> 元数据中，而 Golang 官方的 <code>image</code> 库进行解码时<strong>只会读取像素数据</strong>，并不会根据元数据进行相应的转换处理。</p><h2 id="尝试保留元数据"><a href="#尝试保留元数据" class="headerlink" title="尝试保留元数据"></a>尝试保留元数据</h2><p>发现问题后，我脑袋中立刻想到的第一个解决方法就是在编码图片时<strong>保留 EXIF 元数据</strong>。</p><p>然而经过一番尝试后，我发现这条路行不通。</p><p>首先，Cube 中使用 <code>github.com/chai2010/webp</code> 库进行 Webp 编码，而这个库只对 <code>libwebp</code> 的基础编码接口进行了 Golang 封装，<strong>并没有暴露 EXIF 的写入接口</strong>，这意味着我们只能自己提取元数据，然后<strong>手动封装</strong>成 <code>EXIF chunk</code> 并插入到 <code>RIFF</code> 容器中。</p><p>其次，保留元数据也不利于后续的图像处理，例如在对图片进行缩略图生成时，又要<strong>重新进行一遍上述操作</strong>，来把元数据封装到 JPEG 缩略图中。</p><p>所以最终我还是选择了另一个简单粗暴的方案：直接在上传图片时就对图片进行<strong>方向修正</strong>，然后再进行编码。</p><h2 id="方向修正"><a href="#方向修正" class="headerlink" title="方向修正"></a>方向修正</h2><p>方向修正的实现也比较简单，先<strong>读取 EXIF 元数据</strong>，然后根据 <code>Orientation</code> 标签的值对图像<strong>进行旋转处理</strong>即可。</p><p>读取元数据可以用 <code>github.com/rwcarlsen/goexif/exif</code> 这个库，将文件读取为 <code>io.Reader</code> 后传入解码器即可。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go">x<span class="token punctuation">,</span> err <span class="token operator">:=</span> exif<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>exifData<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span><span class="token comment">// 读取 Orientation 标签的值</span>tag<span class="token punctuation">,</span> err <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>exif<span class="token punctuation">.</span>Orientation<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span><span class="token comment">// 转换为整数</span>orientation<span class="token punctuation">,</span> err <span class="token operator">:=</span> tag<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span></code></pre></div></figure><p>旋转图片的操作可以用 Golang 官方的 <code>image</code> 库进行，不过需要手动映射像素，比较麻烦。</p><p>我们可以使用 <code>github.com/disintegration/imaging</code> 这个库，它封装了 <code>FlipH</code>、<code>FlipV</code>、<code>Rotate180</code> 等<strong>常用的旋转操作</strong>。</p><p>以下是根据不同 <code>Orientation</code> 值进行旋转的代码：</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// applyOrientation 根据 EXIF Orientation 调整图像方向</span><span class="token keyword">func</span> <span class="token function">applyOrientation</span><span class="token punctuation">(</span>img image<span class="token punctuation">.</span>Image<span class="token punctuation">,</span> orientation <span class="token builtin">int</span><span class="token punctuation">)</span> image<span class="token punctuation">.</span>Image <span class="token punctuation">&#123;</span><span class="token keyword">switch</span> orientation <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment">// 正常</span><span class="token keyword">return</span> img<span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment">// 水平翻转</span><span class="token keyword">return</span> imaging<span class="token punctuation">.</span><span class="token function">FlipH</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token comment">// 旋转 180°</span><span class="token keyword">return</span> imaging<span class="token punctuation">.</span><span class="token function">Rotate180</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token comment">// 垂直翻转</span><span class="token keyword">return</span> imaging<span class="token punctuation">.</span><span class="token function">FlipV</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token comment">// 顺时针 90° + 水平翻转</span><span class="token keyword">return</span> imaging<span class="token punctuation">.</span><span class="token function">FlipH</span><span class="token punctuation">(</span>imaging<span class="token punctuation">.</span><span class="token function">Rotate270</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token comment">// 顺时针 90°</span><span class="token keyword">return</span> imaging<span class="token punctuation">.</span><span class="token function">Rotate270</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token comment">// 顺时针 90° + 垂直翻转</span><span class="token keyword">return</span> imaging<span class="token punctuation">.</span><span class="token function">FlipV</span><span class="token punctuation">(</span>imaging<span class="token punctuation">.</span><span class="token function">Rotate270</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token comment">// 逆时针 90°</span><span class="token keyword">return</span> imaging<span class="token punctuation">.</span><span class="token function">Rotate90</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">return</span> img<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>最后在执行 <code>webp.Encode</code> 函数前调用 <code>applyOrientation</code> 函数即可。</p><h2 id="坐现成的轮椅"><a href="#坐现成的轮椅" class="headerlink" title="坐现成的轮椅"></a>坐现成的轮椅</h2><p>既然已经引入了 <code>imaging</code> 这个库，那它还能帮我们简化更多操作吗？</p><p>当然可以，其实 <code>imaging</code> 库内置的解码函数已经提供了<strong>自动处理方向</strong>的选项，可以直接替换掉 <code>image</code> 库的解码函数。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// Before</span>img<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> image<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span><span class="token comment">// 此处省略读取 orientation 的代码</span>img <span class="token operator">=</span> <span class="token function">applyOrientation</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> orientation<span class="token punctuation">)</span><span class="token comment">// After</span>img<span class="token punctuation">,</span> err <span class="token operator">:=</span> imaging<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> imaging<span class="token punctuation">.</span><span class="token function">AutoOrientation</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span></code></pre></div></figure><p>此外，缩略图的<strong>自动缩放逻辑</strong>也能直接用现成的 <code>imaging.Fit</code> 替代。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// Before</span><span class="token keyword">func</span> <span class="token function">resizeIfNeeded</span><span class="token punctuation">(</span>img image<span class="token punctuation">.</span>Image<span class="token punctuation">,</span> targetLongSide <span class="token builtin">int</span><span class="token punctuation">)</span> image<span class="token punctuation">.</span>Image <span class="token punctuation">&#123;</span>b <span class="token operator">:=</span> img<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">,</span> h <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">Dx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">Dy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>longSide<span class="token punctuation">,</span> shortSide <span class="token operator">:=</span> <span class="token function">max</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token keyword">if</span> longSide <span class="token operator">&lt;=</span> targetLongSide <span class="token punctuation">&#123;</span><span class="token keyword">return</span> img<span class="token punctuation">&#125;</span>scale <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>targetLongSide<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span>longSide<span class="token punctuation">)</span>targetShort <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>shortSide<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">)</span><span class="token keyword">var</span> tw<span class="token punctuation">,</span> th <span class="token builtin">int</span><span class="token keyword">if</span> w <span class="token operator">></span> h <span class="token punctuation">&#123;</span>tw<span class="token punctuation">,</span> th <span class="token operator">=</span> targetLongSide<span class="token punctuation">,</span> targetShort<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>tw<span class="token punctuation">,</span> th <span class="token operator">=</span> targetShort<span class="token punctuation">,</span> targetLongSide<span class="token punctuation">&#125;</span>dst <span class="token operator">:=</span> image<span class="token punctuation">.</span><span class="token function">NewRGBA</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tw<span class="token punctuation">,</span> th<span class="token punctuation">)</span><span class="token punctuation">)</span>draw<span class="token punctuation">.</span>Lanczos<span class="token punctuation">.</span><span class="token function">Scale</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> dst<span class="token punctuation">.</span>Rect<span class="token punctuation">,</span> img<span class="token punctuation">,</span> b<span class="token punctuation">,</span> draw<span class="token punctuation">.</span>Over<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">return</span> dst<span class="token punctuation">&#125;</span><span class="token comment">// After</span><span class="token keyword">func</span> <span class="token function">resizeIfNeeded</span><span class="token punctuation">(</span>img image<span class="token punctuation">.</span>Image<span class="token punctuation">,</span> targetLongSide <span class="token builtin">int</span><span class="token punctuation">)</span> image<span class="token punctuation">.</span>Image <span class="token punctuation">&#123;</span><span class="token keyword">return</span> imaging<span class="token punctuation">.</span><span class="token function">Fit</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> targetLongSide<span class="token punctuation">,</span> targetLongSide<span class="token punctuation">,</span> imaging<span class="token punctuation">.</span>Lanczos<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>由此可见，<code>image</code> 库自带的处理函数功能精简，只提供了<strong>最基础的操作和绘图函数</strong>，而 <code>imaging</code> 库则提供了<strong>完善的封装</strong>和<strong>更多高级功能</strong>，简直是超级轮椅般的存在。</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>将修复后的版本同步到测试服后，iPhone 用户拍的照片终于方向正常了。</p><p><img src="/img/cube-1st/2.png" alt="正着的鲨鱼.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>精弘存储立方</tag>
      
      <tag>Golang</tag>
      
      <tag>后端开发</tag>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Windows 下应用 Git 官方汉化</title>
    <link href="/2025/08/23/git-for-windows-l10n/"/>
    <url>/2025/08/23/git-for-windows-l10n/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天水群的时候，看到一群友在 Windows 下吃上了中文 Git</p><p><img src="/img/git-for-windows-l10n/kitra.png" alt="群友吃上了中文 Git"></p><p>与其讨论后得知 Git 官方提供了中文语言包，但是 <strong>Git for Windows 并没有打包国际化文件</strong>，导致在 Windows 下使用 Git 时默认只能使用英文</p><p>于是心血来潮，写篇博客记录下如何在 Windows 下应用 Git 官方汉化</p><h2 id="构建翻译文件"><a href="#构建翻译文件" class="headerlink" title="构建翻译文件"></a>构建翻译文件</h2><p>打开 <a href="https://github.com/git/git">Git 官方仓库</a>，找到 <code>po</code> 目录，可以看到里面有各个语言的翻译文件</p><p><code>.po</code> 文件是 <strong>Portable Object 文件</strong>，主要用于软件国际化（i18n）和本地化（l10n），它是 GNU gettext 使用的标准格式</p><p>要将 <code>.po</code> 文件转换为软件能读取的 <code>.mo</code> 文件，需要使用 <code>msgfmt</code> 命令进行构建</p><p>为了方便大家使用，我已经创建了一个<a href="https://github.com/SugarMGP/git-l10n-build">构建仓库</a>，每天早上 8 点 Github Action 会自动从上游获取 Git 最新语言文件，如果有更新则自动构建出 <code>.mo</code> 文件并上传到 Release</p><p>当然，如果您有 Linux 环境，也可以通过下面的命令来手动构建</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 gettext 工具</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> gettext<span class="token comment"># 构建 zh_CN.mo 文件</span>msgfmt zh_CN.po <span class="token parameter variable">-o</span> zh_CN.mo</code></pre></div></figure><h2 id="应用翻译文件"><a href="#应用翻译文件" class="headerlink" title="应用翻译文件"></a>应用翻译文件</h2><p>获取构建好的 <code>zh_CN.mo</code> 文件后，将文件名改为 <code>git.mo</code></p><p>打开 <code>C:\Program Files\Git\mingw64\share\locale\zh_CN\LC_MESSAGES</code>，其中 <code>C:\Program Files\Git</code> 是你的 Git 安装目录</p><p>如果子目录不存在，则需要手动创建文件夹来补全</p><p>然后将 <code>git.mo</code> 文件复制到该目录下</p><p><img src="/img/git-for-windows-l10n/mo.png" alt="复制到该目录下"></p><p>最后，新建环境变量 <code>LANG=zh_CN.UTF-8</code></p><p><img src="/img/git-for-windows-l10n/env1.png" alt="添加环境变量1"></p><p><img src="/img/git-for-windows-l10n/env2.png" alt="添加环境变量2"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>重新打开你的终端，输入 <code>git</code> 命令，享受中文！</p><p><img src="/img/git-for-windows-l10n/enjoy.png" alt="效果"></p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>Git</tag>
      
      <tag>l10n</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>精弘网络 Java 后端微课 - EP3 异常捕获与日志记录</title>
    <link href="/2025/08/13/summer-lessons-ep3/"/>
    <url>/2025/08/13/summer-lessons-ep3/</url>
    
    <content type="html"><![CDATA[<h2 id="接口日志记录"><a href="#接口日志记录" class="headerlink" title="接口日志记录"></a>接口日志记录</h2><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessLogFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AnsiOutput</span><span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token class-name">AnsiOutput<span class="token punctuation">.</span>Enabled</span><span class="token punctuation">.</span><span class="token constant">ALWAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AnsiColor</span> <span class="token function">getStatusColor</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>status <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">-></span> <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span> <span class="token operator">-></span> <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">YELLOW</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span> <span class="token operator">-></span> <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>            <span class="token keyword">default</span> <span class="token operator">-></span> <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AnsiColor</span> <span class="token function">getMethodColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"GET"</span> <span class="token operator">-></span> <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">BLUE</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"POST"</span> <span class="token operator">-></span> <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">CYAN</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"PUT"</span> <span class="token operator">-></span> <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">YELLOW</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"DELETE"</span> <span class="token operator">-></span> <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">;</span>            <span class="token keyword">default</span> <span class="token operator">-></span> <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">MAGENTA</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>response <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletResponse</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Instant</span> start <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Instant</span> end <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> durationMs <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> status <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> uri <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> query <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token function">getRemoteAddr</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 彩色状态码</span>        <span class="token class-name">String</span> colorStatus <span class="token operator">=</span> <span class="token class-name">AnsiOutput</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>                <span class="token function">getStatusColor</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span>                status<span class="token punctuation">,</span>                <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 彩色方法</span>        <span class="token class-name">String</span> colorMethod <span class="token operator">=</span> <span class="token class-name">AnsiOutput</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>                <span class="token function">getMethodColor</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">,</span>                method<span class="token punctuation">,</span>                <span class="token class-name">AnsiColor</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; | &#123;&#125;ms | &#123;&#125; &#123;&#125; | IP: &#123;&#125;"</span><span class="token punctuation">,</span>                colorStatus<span class="token punctuation">,</span>                durationMs<span class="token punctuation">,</span>                <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%-6s"</span><span class="token punctuation">,</span> colorMethod<span class="token punctuation">)</span><span class="token punctuation">,</span>                uri <span class="token operator">+</span> <span class="token punctuation">(</span>query <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">"?"</span> <span class="token operator">+</span> query <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                ip        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="自定义错误类型与错误码聚合"><a href="#自定义错误类型与错误码聚合" class="headerlink" title="自定义错误类型与错误码聚合"></a>自定义错误类型与错误码聚合</h2><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> errorCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> errorCode<span class="token punctuation">,</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> errorCode<span class="token punctuation">,</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ExceptionEnum</span> <span class="token punctuation">&#123;</span>    <span class="token function">INVALID_PARAMETER</span><span class="token punctuation">(</span><span class="token number">200000</span><span class="token punctuation">,</span> <span class="token string">"参数错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">RESOURCE_NOT_FOUND</span><span class="token punctuation">(</span><span class="token number">200001</span><span class="token punctuation">,</span> <span class="token string">"资源不存在"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WRONG_USERNAME_OR_PASSWORD</span><span class="token punctuation">(</span><span class="token number">200002</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">PERMISSION_NOT_ALLOWED</span><span class="token punctuation">(</span><span class="token number">200003</span><span class="token punctuation">,</span> <span class="token string">"权限不足"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NOT_FOUND_ERROR</span><span class="token punctuation">(</span><span class="token number">200404</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">NOT_FOUND</span><span class="token punctuation">.</span><span class="token function">getReasonPhrase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SERVER_ERROR</span><span class="token punctuation">(</span><span class="token number">200500</span><span class="token punctuation">,</span> <span class="token string">"系统错误, 请稍后重试"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> errorCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">;</span>    <span class="token class-name">ExceptionEnum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> errorCode<span class="token punctuation">,</span> <span class="token class-name">String</span> errorMsg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorCode <span class="token operator">=</span> errorCode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>errorMsg <span class="token operator">=</span> errorMsg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="错误捕获"><a href="#错误捕获" class="headerlink" title="错误捕获"></a>错误捕获</h2><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">handleGlobalException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HandlerUtils</span><span class="token punctuation">.</span><span class="token function">logException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">AjaxResult</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">ExceptionEnum</span><span class="token punctuation">.</span><span class="token constant">SERVER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>常见参数校验异常：</p><ul><li><code>MethodArgumentNotValidException</code> 参数校验错误</li><li><code>JsonMappingException</code> Json解析失败</li><li><code>HttpMessageNotReadableException</code> Json格式错误</li><li><code>ServletRequestBindingException</code> Query参数错误</li></ul><p>常见 404 异常：</p><ul><li><code>NoResourceFoundException</code> 路径不存在</li><li><code>HttpRequestMethodNotSupportedException</code> 请求方法不支持</li></ul><h2 id="课外拓展"><a href="#课外拓展" class="headerlink" title="课外拓展"></a>课外拓展</h2><p>这边列出一些可以课外研究研究的方面，以便你对 Spring 框架有更深的理解。</p><p>注意：这些教程可能与最新的 Spring 版本有所出入，有疑问可以多上网上搜搜，或者问 Qwen、Deepseek 等大语言模型。</p><ul><li><a href="https://dunwu.github.io/spring-tutorial/pages/68097d/">Spring Bean</a></li><li><a href="https://dunwu.github.io/spring-tutorial/pages/915530/">Spring IOC</a></li><li><a href="https://dunwu.github.io/spring-tutorial/pages/f61a1c/">Spring 依赖注入</a></li><li><a href="https://dunwu.github.io/spring-tutorial/pages/f61a1c/">Spring AOP</a></li><li><a href="https://dunwu.github.io/spring-tutorial/pages/65e4a2/">Spring 访问 Redis</a></li><li><a href="https://dunwu.github.io/spring-tutorial/pages/a187f0/">Spring 集成调度器</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>后端开发</tag>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>MybatisPlus</tag>
      
      <tag>精弘微课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>精弘网络 Java 后端微课 - EP2 业务分层与数据库操作</title>
    <link href="/2025/08/10/summer-lessons-ep2/"/>
    <url>/2025/08/10/summer-lessons-ep2/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h2><p><strong>1. 数据库（Database）</strong></p><p>存放数据的地方，比如 MySQL、PostgreSQL 就是常见的数据库软件。</p><p><strong>2. 表（Table）</strong></p><p>数据是按表来存的，就像 Excel 的工作表，每一行是一条记录，每一列是一个字段。</p><p><strong>3. 字段（Column）</strong></p><p>表里的列，比如 <code>name</code>、<code>age</code>，用来描述数据的属性。</p><p><strong>4. 记录 &#x2F; 行（Row &#x2F; Record）</strong></p><p>表中的一行数据，比如一个用户的信息就是一条记录。</p><p><strong>5. 主键（Primary Key）</strong></p><p>表中唯一标识一条记录的字段，比如 <code>id</code>。</p><p><strong>6. 常见操作（CRUD）</strong></p><ul><li>Create：插入数据（INSERT）</li><li>Read：查询数据（SELECT）</li><li>Update：修改数据（UPDATE）</li><li>Delete：删除数据（DELETE）</li></ul><p><strong>7. SQL</strong></p><p>操作数据库的语言（Structured Query Language），比如：</p><figure><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></div></figure><h2 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>MyBatis-Plus 是一款 <strong>Java ORM（Object Relational Mapping，对象关系映射）框架</strong>。</p><p>它将数据库表与 Java 类、字段与类属性一一映射，实现数据与对象的自动转换，大幅减少手写 SQL 的工作量。</p><p><a href="https://baomidou.com/">Mybatis-Plus 官网</a></p><p>它具备以下实用特性：</p><ul><li>基于 MyBatis 框架的增强，<strong>无需编写 XML 配置文件</strong></li><li>内置很多<strong>常用的 CRUD 方法</strong></li><li>支持<strong>条件构造器</strong>，写复杂查询不必手写 SQL</li><li>提供<strong>分页插件、代码生成器</strong>等工具，提升开发效率</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-spring-boot3-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-jsqlparser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div></figure><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><figure><div class="code-wrapper"><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/forum_db<span class="token punctuation">?</span>useSSL=false<span class="token important">&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-</span><span class="token number">8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span></code></pre></div></figure><h2 id="建表并生成实体类"><a href="#建表并生成实体类" class="headerlink" title="建表并生成实体类"></a>建表并生成实体类</h2><p><a href="https://baomidou.com/guides/mybatis-x/">Mybatis X 插件</a></p><h2 id="业务分层"><a href="#业务分层" class="headerlink" title="业务分层"></a>业务分层</h2><p>分层架构帮助我们组织代码，让每个部分各司其职，提高代码的可维护性和可扩展性</p><ul><li>控制器（Controller）：处理 HTTP 请求，调用服务层处理业务逻辑，返回响应结果。</li><li>服务层（Service）：定义业务逻辑接口，实现业务逻辑，调用数据访问层操作数据库。</li><li>数据访问层（Mapper）：定义数据库操作接口，提供 CRUD 方法操作数据库。</li><li>实体类（Entity）：表示数据库表的 Java 类。</li></ul><p><a href="https://baomidou.com/guides/data-interface/">持久层接口</a></p><h2 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h2><p><a href="https://baomidou.com/guides/wrapper/">条件构造器</a></p><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p><a href="https://baomidou.com/guides/logic-delete/">逻辑删除支持</a></p><h2 id="自动填充字段"><a href="#自动填充字段" class="headerlink" title="自动填充字段"></a>自动填充字段</h2><p><a href="https://baomidou.com/guides/auto-fill-field/">自动填充字段</a></p><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoFillHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createdAt"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updatedAt"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updatedAt"</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="课外拓展"><a href="#课外拓展" class="headerlink" title="课外拓展"></a>课外拓展</h2><h3 id="身份鉴权"><a href="#身份鉴权" class="headerlink" title="身份鉴权"></a>身份鉴权</h3><p>使用用户ID进行身份鉴权会不会产生安全问题？尝试使用 JWT 或 Session 对登录和鉴权流程进行优化，可自行搜索相关库和技术博客进行学习</p><p><a href="https://www.bilibili.com/video/BV1ob4y1Y7Ep/">Cookie、Session、Token究竟区别在哪？如何进行身份认证，保持用户登录状态？</a></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>如果数据量很大，一次性查询所有数据会导致性能问题，尝试学习使用 Mybatis-Plus 提供的分页插件</p><h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><p>如果在业务逻辑中需要对多个表进行更新操作，如何确保这些操作要么全部成功，要么全部失败？可以自行搜索了解如何使用 SpringBoot 中的事务管理机制</p>]]></content>
    
    
    
    <tags>
      
      <tag>后端开发</tag>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>MybatisPlus</tag>
      
      <tag>精弘微课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>精弘网络 Java 后端微课 - EP1.5 巧用 Lombok 简化样板代码</title>
    <link href="/2025/08/04/summer-lessons-ep1.5/"/>
    <url>/2025/08/04/summer-lessons-ep1.5/</url>
    
    <content type="html"><![CDATA[<h2 id="导入-Lombok"><a href="#导入-Lombok" class="headerlink" title="导入 Lombok"></a>导入 Lombok</h2><figure><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></div></figure><h2 id="原理简析"><a href="#原理简析" class="headerlink" title="原理简析"></a>原理简析</h2><p><img src="/img/summer-lessons-2025/1.5.1.png"></p><p>Java 的编译过程可以分成三个阶段：</p><ol><li>把所有源文件解析成语法树</li><li>调用注解处理器，如果产生了新的源文件则再次编译</li><li>分析语法树并转化成类文件</li></ol><p>Lombok 会在上述的第二阶段，执行 <em>lombok.core.AnnotationProcessor</em>，它所做的工作就是修改语法树，并将注解对应需要生成的内容全部添加到类文件中。</p><p>这样，我们即使没有在源代码中编写的内容，也会存在于生成出来的 class 文件中。</p><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="Getter-和-Setter"><a href="#Getter-和-Setter" class="headerlink" title="@Getter 和 @Setter"></a>@Getter 和 @Setter</h3><p>可以打在字段或者类上，作用是生成对应的 get 和 set 方法。</p><p>注意布尔值的命名规则：</p><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> bar<span class="token punctuation">;</span>    <span class="token comment">// isBar()</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isBar<span class="token punctuation">;</span>  <span class="token comment">// isBar()</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> foo<span class="token punctuation">;</span>    <span class="token comment">// getFoo()</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isFoo<span class="token punctuation">;</span>  <span class="token comment">// getIsFoo()</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="构造函数相关"><a href="#构造函数相关" class="headerlink" title="构造函数相关"></a>构造函数相关</h3><ul><li><code>@AllArgsConstructor</code> 生成全参构造函数</li><li><code>@NoArgsConstructor</code> 生成无参构造函数</li><li><code>@RequiredArgsConstructor</code> 生成需要初始化的参数的构造函数</li></ul><h3 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h3><p>自动生成类的 toString 方法，默认输出类名和所有字段名和值。</p><h3 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h3><p>自动生成类属性的比较方法以及对应的 HashCode 计算</p><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Account</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Account</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></figure><h3 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h3><p>集大成者，包含了 <code>@Getter</code>、<code>@Setter</code>、<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@RequiredArgsConstructor</code></p><h3 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h3><p>生成 Builder 模式的代码，用于创建对象。</p><h3 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h3><p><strong>Simple Logging Facade for Java（简称 SLF4J）</strong> 是一个 Java 日志门面（facade）库，其主要作用是为各种日志框架提供统一的日志 API 接口</p><p>Spring Boot 默认使用 <code>slf4j-api</code> 作为日志 API，<code>logback-classic</code> 作为默认实现</p><p>Lombok 的 @Slf4j 注解会自动生成一个 SLF4J 日志对象，其等效于</p><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>Logger</span> log <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></figure><h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><p><a href="https://projectlombok.org/features">Lombok 官方文档</a></p><p><a href="https://www.itbaima.cn/zh-CN/document/iqbc2haub31bwqtz">柏码知识库 - Lombok 极速上手</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>后端开发</tag>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>MybatisPlus</tag>
      
      <tag>精弘微课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>精弘网络 Java 后端微课 - EP1 控制器的编写和数据绑定</title>
    <link href="/2025/08/04/summer-lessons-ep1/"/>
    <url>/2025/08/04/summer-lessons-ep1/</url>
    
    <content type="html"><![CDATA[<h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><p>若无法连接到官方 Spring Initializr，可更换到国内站点 <a href="https://start.springboot.io/">https://start.springboot.io/</a></p><ul><li>Spring Web</li><li>Spring Validation</li><li>MySQL Driver</li><li>Lombok</li></ul><figure><div class="code-wrapper"><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parameters</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parameters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span></code></pre></div></figure><h2 id="编写一个控制器"><a href="#编写一个控制器" class="headerlink" title="编写一个控制器"></a>编写一个控制器</h2><h3 id="什么是“控制器”（Controller）"><a href="#什么是“控制器”（Controller）" class="headerlink" title="什么是“控制器”（Controller）"></a>什么是“控制器”（Controller）</h3><p>在 Spring Boot 中，<strong>控制器是处理用户请求的入口</strong>。</p><p>你可以把它想象成一个网站或接口的“接待员”：<br>👉 用户发来请求，控制器接收、处理，然后返回响应。</p><h3 id="RestController-是什么"><a href="#RestController-是什么" class="headerlink" title="@RestController 是什么"></a>@RestController 是什么</h3><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span> <span class="token operator">=</span> <span class="token annotation punctuation">@Controller</span> <span class="token operator">+</span> <span class="token annotation punctuation">@ResponseBody</span></code></pre></div></figure><p>用来告诉 Spring 这个类是一个控制器（用来接收 Web 请求），并且返回的是 JSON 数据（而不是 HTML 页面）</p><h3 id="RequestMapping-是什么"><a href="#RequestMapping-是什么" class="headerlink" title="@RequestMapping 是什么"></a>@RequestMapping 是什么</h3><p>告诉 Spring，这个类负责处理哪个 URL 请求</p><p>常用方法：加在类上，定义“公共前缀”</p><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><h3 id="Query-参数绑定"><a href="#Query-参数绑定" class="headerlink" title="Query 参数绑定"></a>Query 参数绑定</h3><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="路径参数绑定"><a href="#路径参数绑定" class="headerlink" title="路径参数绑定"></a>路径参数绑定</h3><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get/&#123;name&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="绑定-Query-或表单到对象"><a href="#绑定-Query-或表单到对象" class="headerlink" title="绑定 Query 或表单到对象"></a>绑定 Query 或表单到对象</h3><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="绑定-JSON-到对象"><a href="#绑定-JSON-到对象" class="headerlink" title="绑定 JSON 到对象"></a>绑定 JSON 到对象</h3><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">"first_name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/post"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@NotNull</span>、<span class="token annotation punctuation">@NotEmpty</span>、<span class="token annotation punctuation">@NotBlank</span><span class="token annotation punctuation">@Size</span>、<span class="token annotation punctuation">@Email</span><span class="token annotation punctuation">@Min</span>、<span class="token annotation punctuation">@Max</span></code></pre></div></figure><h2 id="统一-JSON-响应体"><a href="#统一-JSON-响应体" class="headerlink" title="统一 JSON 响应体"></a>统一 JSON 响应体</h2><figure><div class="code-wrapper"><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AjaxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUCCESS_MSG</span> <span class="token operator">=</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">N</span><span class="token punctuation">></span></span> <span class="token class-name">AjaxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">N</span><span class="token punctuation">></span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">SUCCESS_MSG</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">N</span><span class="token punctuation">></span></span> <span class="token class-name">AjaxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">N</span><span class="token punctuation">></span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">N</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">SUCCESS_MSG</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">N</span><span class="token punctuation">></span></span> <span class="token class-name">AjaxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">N</span><span class="token punctuation">></span></span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AjaxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>后端开发</tag>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>MybatisPlus</tag>
      
      <tag>精弘微课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>精弘网络 Java 后端微课 - EP0 前置准备与环境搭建</title>
    <link href="/2025/08/04/summer-lessons-ep0/"/>
    <url>/2025/08/04/summer-lessons-ep0/</url>
    
    <content type="html"><![CDATA[<h2 id="课程引入"><a href="#课程引入" class="headerlink" title="课程引入"></a>课程引入</h2><p>使用框架：SpringBoot3 + MybatisPlus</p><p><a href="https://www.bilibili.com/video/BV148411R7B2/">Web开发前置知识</a></p><p>需要有 Java 语法基础，<a href="https://www.anseon.cn/java/threshold/basic-grammar.html">参考文档</a></p><p>如果觉得 Java 难度太高，可以选择 Golang 方向：<a href="https://www.bilibili.com/video/BV1ud4y1o7Yt">Golang语法课</a>、<a href="https://www.bilibili.com/video/BV1o841197jX">Gin</a>、<a href="https://www.bilibili.com/video/BV1dj411z7pW">Gorm</a>、<a href="https://www.bilibili.com/video/BV1nN41187ez">Viper</a></p><p><a href="https://apifox.com/apidoc/shared/7ed6dbc4-b5cc-4280-946c-b66c4ba8602b">技术大作业</a> 访问密码: zjutjh2025</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><a href="https://adoptium.net/zh-CN/temurin/releases?version=17">OpenJDK17</a></p><p><a href="https://www.jetbrains.com/zh-cn/idea/download">IDEA Ultimate</a></p><p><a href="https://mirrors.huaweicloud.com/mysql/Downloads/MySQLInstaller/">MySQL（华为云镜像）</a></p><p><a href="https://apifox.com/">Apifox</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>后端开发</tag>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>MybatisPlus</tag>
      
      <tag>精弘微课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于 WebSocket 协议打造简易聊天服务端</title>
    <link href="/2025/03/11/websocket-chat-server/"/>
    <url>/2025/03/11/websocket-chat-server/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在本次寒假软件竞赛中，我们决定为系统添加用户间的实时聊天功能。经过综合考量性能、开发难度以及用户体验等因素，我们最终选择基于 <strong>WebSocket</strong> 协议来实现这一功能。</p><h2 id="为什么是-WebSocket？"><a href="#为什么是-WebSocket？" class="headerlink" title="为什么是 WebSocket？"></a>为什么是 WebSocket？</h2><p>WebSocket 是一种基于 <strong>TCP</strong> 的通信协议，它通过建立一个单一的、持久的连接，实现了客户端与服务器之间的<strong>全双工实时通信</strong>。相较于传统的 HTTP 协议，WebSocket 在实时通信场景下具有显著优势：</p><ul><li><p><strong>实时双向通信</strong>：WebSocket 允许服务器主动向客户端推送消息，而不仅仅是等待客户端的请求。这消除了传统 HTTP 轮询（Polling）方式带来的延迟，使得消息能够即时送达。</p></li><li><p><strong>高效资源利用</strong>：WebSocket 使用单一的、长时间保持的连接，避免了 HTTP 协议每次请求都需要建立和断开连接的开销。这能减少不必要的握手过程，降低服务器的资源消耗，并显著节省带宽。</p></li><li><p><strong>灵活格式支持</strong>：WebSocket 协议本身不对消息格式进行限制，开发者可以根据实际需求选择合适的数据格式，例如 JSON、XML 或 Protobuf 等。</p></li></ul><h2 id="项目实践"><a href="#项目实践" class="headerlink" title="项目实践"></a>项目实践</h2><p>为了在 Golang 中处理 WebSocket 协议的请求，我们首先需要引入一个强大的第三方库 <code>gorilla/websocket</code>。这个库为我们提供了便捷的 WebSocket 操作接口，极大地简化了开发过程。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">go get github.com/gorilla/websocket</code></pre></div></figure><h3 id="升级-WebSocket-连接"><a href="#升级-WebSocket-连接" class="headerlink" title="升级 WebSocket 连接"></a>升级 WebSocket 连接</h3><p>为了把 HTTP 连接升级到 WS ，我们需要<strong>初始化一个 Upgrader 实例</strong>。它的用法非常简单，直接<strong>传入 HTTP Writer 和 Request 即可</strong>。</p><p>此处缓冲区我简单设置成 1024 字节，生产环境中如果遇到性能瓶颈可以适当调整。</p><p>跨域检测这里直接返回 <code>true</code>，因为路由端已经进行了处理。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> upgrader <span class="token operator">=</span> websocket<span class="token punctuation">.</span>Upgrader<span class="token punctuation">&#123;</span>ReadBufferSize<span class="token punctuation">:</span>  <span class="token number">1024</span><span class="token punctuation">,</span>WriteBufferSize<span class="token punctuation">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>CheckOrigin<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token boolean">_</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 用法：将 HTTP 请求升级为 WebSocket 连接</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> upgrader<span class="token punctuation">.</span><span class="token function">Upgrade</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></code></pre></div></figure><h3 id="构造连接管理器"><a href="#构造连接管理器" class="headerlink" title="构造连接管理器"></a>构造连接管理器</h3><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ConnectionManager <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>connections <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint</span><span class="token punctuation">]</span><span class="token operator">*</span>websocket<span class="token punctuation">.</span>Conn <span class="token comment">// 存储连接信息</span>    msgChannel  <span class="token keyword">chan</span> models<span class="token punctuation">.</span>Message      <span class="token comment">// 消息队列，用于异步处理消息</span>mutex       sync<span class="token punctuation">.</span>RWMutex             <span class="token comment">// 读写锁，保护 connections 的并发访问</span>stop        atomic<span class="token punctuation">.</span>Bool              <span class="token comment">// 停止标记</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>为了让这个管理器能管理连接，我们编写两个方法，一个用于<strong>注册 WS 连接</strong>，一个用于<strong>移除已断开的连接</strong>。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// registerConnection 注册连接</span><span class="token keyword">func</span> <span class="token punctuation">(</span>cm <span class="token operator">*</span>ConnectionManager<span class="token punctuation">)</span> <span class="token function">registerConnection</span><span class="token punctuation">(</span>conn <span class="token operator">*</span>websocket<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> uid <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 获取历史消息</span>messages<span class="token punctuation">,</span> err <span class="token operator">:=</span> messageService<span class="token punctuation">.</span><span class="token function">GetMessagesByUser</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// 注册连接并推送历史消息</span>cm<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cm<span class="token punctuation">.</span>connections<span class="token punctuation">[</span>uid<span class="token punctuation">]</span> <span class="token operator">=</span> conncm<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> msg <span class="token operator">:=</span> <span class="token keyword">range</span> messages <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">WriteJSON</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// unregisterConnection 移除连接</span><span class="token keyword">func</span> <span class="token punctuation">(</span>cm <span class="token operator">*</span>ConnectionManager<span class="token punctuation">)</span> <span class="token function">unregisterConnection</span><span class="token punctuation">(</span>uid <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cm<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">delete</span><span class="token punctuation">(</span>cm<span class="token punctuation">.</span>connections<span class="token punctuation">,</span> uid<span class="token punctuation">)</span>cm<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>接着，我们编写一个消息处理函数。</p><p>首先<strong>将传入的消息保存到数据库</strong>，由于前端没有保存消息记录，所以我们<strong>再把消息推送给发送者和接受者</strong>。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>cm <span class="token operator">*</span>ConnectionManager<span class="token punctuation">)</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>message <span class="token operator">*</span>models<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 保存消息到数据库</span><span class="token keyword">if</span> err <span class="token operator">:=</span> messageService<span class="token punctuation">.</span><span class="token function">CreateMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>zap<span class="token punctuation">.</span><span class="token function">L</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">"Error saving message to database"</span><span class="token punctuation">,</span> zap<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>cm<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>receiverConn<span class="token punctuation">,</span> exists <span class="token operator">:=</span> cm<span class="token punctuation">.</span>connections<span class="token punctuation">[</span>message<span class="token punctuation">.</span>Receiver<span class="token punctuation">]</span>senderConn<span class="token punctuation">,</span> senderExists <span class="token operator">:=</span> cm<span class="token punctuation">.</span>connections<span class="token punctuation">[</span>message<span class="token punctuation">.</span>Sender<span class="token punctuation">]</span>cm<span class="token punctuation">.</span>mutex<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 推送给接收人</span><span class="token keyword">if</span> exists <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> receiverConn<span class="token punctuation">.</span><span class="token function">WriteJSON</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 推送给发信人</span><span class="token keyword">if</span> senderExists <span class="token punctuation">&#123;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> senderConn<span class="token punctuation">.</span><span class="token function">WriteJSON</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>在初始化函数中我们启动一个协程，从<strong>消息队列中取出消息并送入消息处理方法</strong>。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token operator">!</span>cm<span class="token punctuation">.</span>stop<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>cm<span class="token punctuation">.</span>userChannelscm<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h3><p>为了接受前端的握手请求，我们像先前那样写一个控制器并挂载到路由上。</p><p>先调用 Upgrader 把请求升级到 WS 连接，然后调用连接管理器进行注册，最后通过循环源源不断地读取前端发来的消息，并送入消息队列。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WebSocketController</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将 HTTP 请求升级为 WebSocket 连接</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> upgrader<span class="token punctuation">.</span><span class="token function">Upgrade</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>response<span class="token punctuation">.</span><span class="token function">AbortWithException</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> apiException<span class="token punctuation">.</span>WebSocketError<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cm<span class="token punctuation">.</span><span class="token function">registerConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>msgType<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">ReadMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>cm<span class="token punctuation">.</span><span class="token function">unregisterConnection</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> msgType <span class="token operator">==</span> websocket<span class="token punctuation">.</span>TextMessage <span class="token punctuation">&#123;</span>            <span class="token comment">// 反序列化到结构体并送入消息队列</span><span class="token keyword">var</span> message models<span class="token punctuation">.</span>Message<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token operator">&amp;</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>zap<span class="token punctuation">.</span><span class="token function">L</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">"Error unmarshaling message"</span><span class="token punctuation">,</span> zap<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">&#125;</span>cm<span class="token punctuation">.</span>msgChannel <span class="token operator">&lt;-</span> message<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>至此，一个超级简单的 WebSocket 服务端就完成了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这次对 WebSocket 的折腾十分有趣，全双工的通信方式带来的使用体验相比 HTTP 轮询有了质的飞跃。</p><p>当然，由于只是花两天时间草草搓的系统，所以项目中仍有许多地方可以改进，如支持发送图片，引入 <code>asynq</code> 等第三方库来完善消息队列等等。更多的探索，相信未来会有机会尝试的。</p><p>由于篇幅所限，本文删去了许多非核心代码，若你想参考我的实现，可以直接翻阅<a href="https://github.com/SugarMGP/BookRecycleServer/blob/main/pkg/ws/ws.go">原项目代码</a>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>后端开发</tag>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 盲点笔记（三）之 指针</title>
    <link href="/2025/01/03/cpp-note-ep3/"/>
    <url>/2025/01/03/cpp-note-ep3/</url>
    
    <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>指针是用于存储变量地址的特殊变量。通过指针，可以间接访问或修改变量的值。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></code></pre></div></figure><p>在上述代码中，<code>num</code> 的地址被存入指针 <code>p</code> 中，并通过 <code>*p</code> 进行解引用，间接给 <code>num</code> 赋值。</p><h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><p>数组名在大多数情况下会被解释为指向其第一个元素的指针。由于数组元素在内存中是连续的，因此可以通过指针遍历数组。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment">// 等价于 int* p = &amp;arr[0];</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token comment">// *(p + i) 等价于 p[i]</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>你可以定义一个指针数组用来存储多个指针，或者声明一个数组指针来指向一个数组。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义一个指针数组，存储数组中每个元素的地址</span><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义一个数组指针，指向整个数组</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">;</span></code></pre></div></figure><p>优先级：<code>() &gt; [] &gt; *</code></p><p>对于 <code>int *p1[5]</code>，<code>[]</code> 的优先级高，<code>p1</code> 首先被解析为数组，数组中的元素类型为整型指针。</p><p>对于 <code>int (*p2)[]</code>，使用 <code>()</code> 提升优先级，强制将 <code>p2</code> 解析为指针。</p><h3 id="多级指针"><a href="#多级指针" class="headerlink" title="多级指针"></a>多级指针</h3><p>多级指针是指向指针的指针，通过它我们可以间接访问多级嵌套的变量值。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">;</span> <span class="token comment">// p2 是指向 p1 的指针</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token operator">*</span>p2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出 10</span></code></pre></div></figure><h3 id="指针与运算符"><a href="#指针与运算符" class="headerlink" title="指针与运算符"></a>指针与运算符</h3><p>指针与运算符经常用来组合出阴间题目，需要多加注意。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"123apple"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token operator">=</span>s1<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token operator">=</span><span class="token operator">&amp;</span>p<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pp <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出 apple</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token operator">++</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出 3</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pp <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出 3apple</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token operator">*</span>pp <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出 3</span></code></pre></div></figure><p>这段代码中：</p><ul><li><p><code>*pp + 3</code> 等价于 <code>p + 3</code></p></li><li><p><code>*p++</code> 和 <code>*++p</code> 分别等价于 <code>*(p++)</code> 和 <code>*(++p)</code></p></li><li><p><code>*pp</code> 等价于 <code>p</code>，此时 <code>p</code> 指向 <code>&amp;s1[2]</code>，故连续输出后面的字符串</p></li><li><p><code>**pp</code> 等价于 <code>*p</code>，故输出 <code>s1[2]</code>，即为 3</p></li></ul><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><p>在 C++ 中，可以使用 <code>new</code> 和 <code>delete</code> 运算符进行动态内存分配和释放。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分配一个初始值为 10 的整数</span><span class="token keyword">delete</span> p<span class="token punctuation">;</span> <span class="token comment">// 释放内存</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 分配包含 n 个整数的数组</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span> <span class="token comment">// 释放数组内存</span></code></pre></div></figure><p>使用完动态分配的变量后一定记得调用 <code>delete</code> 或 <code>delete[]</code> 释放内存，否则会导致内存泄漏。</p><p>多级指针在动态分配二维数组时非常有用，因为二维数组本质上可以看作是指针的数组。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">;</span>cin <span class="token operator">>></span> rows <span class="token operator">>></span> cols<span class="token punctuation">;</span><span class="token comment">// 动态分配一个指针数组</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">[</span>rows<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 为数组分配每一行的空间</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放内存</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 释放每行的内存</span><span class="token punctuation">&#125;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span> <span class="token comment">// 释放指针数组的内存</span></code></pre></div></figure><p>如果你不想使用多级指针，也可以使用上文提到的数组指针。</p><p>这种方式不太常见，并且写法有点反直觉。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">;</span>cin <span class="token operator">>></span> rows <span class="token operator">>></span> cols<span class="token punctuation">;</span><span class="token comment">// 动态分配一个连续的二维数组</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>rows<span class="token punctuation">]</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 指向包含 cols 个整数的数组</span><span class="token comment">// 释放内存</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span></code></pre></div></figure><h3 id="常量指针与指针常量"><a href="#常量指针与指针常量" class="headerlink" title="常量指针与指针常量"></a>常量指针与指针常量</h3><ul><li><p>常量指针 <code>const int* p</code> 或 <code>int const *p</code>：指针指向的值不可修改，但指针本身可以指向其他地址。</p></li><li><p>指针常量 <code>int* const p</code>：指针本身不可修改，但指向的值可以修改。</p></li><li><p>指向常量的指针常量 <code>const int* const p</code>：指针本身和指向的值都不可修改。</p></li></ul><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>函数指针用于指向函数，可以通过它调用函数。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 声明一个函数指针，指向 add 函数</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> add<span class="token punctuation">;</span></code></pre></div></figure><p>函数指针常用于自定义排序条件，以下是一个冒泡排序示例，它通过传入函数指针来实现排序的灵活性。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 比较函数：降序</span><span class="token keyword">bool</span> <span class="token function">descending</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span> <span class="token comment">// 如果 a > b，则不需要交换</span><span class="token punctuation">&#125;</span><span class="token comment">// 比较函数：升序</span><span class="token keyword">bool</span> <span class="token function">ascending</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token comment">// 如果 a &lt; b，则不需要交换</span><span class="token punctuation">&#125;</span><span class="token comment">// 冒泡排序函数</span><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>compare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 使用函数指针进行比较，若为 false 则交换元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compare</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用冒泡排序（升序）</span>    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> ascending<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 输出：1 2 3 4 5</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 使用冒泡排序（降序）</span>    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> descending<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 输出：5 4 3 2 1</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="指针与结构体"><a href="#指针与结构体" class="headerlink" title="指针与结构体"></a>指针与结构体</h3><p>指针常用于操作结构体，特别是在动态内存分配时。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Person<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">new</span> Person<span class="token punctuation">;</span>p<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token string">"Alice"</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 (*p).name = "Alice";</span>p<span class="token operator">-></span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">delete</span> p<span class="token punctuation">;</span></code></pre></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>笔记</tag>
      
      <tag>指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浙工大第五届 CTF 迎新赛回顾</title>
    <link href="/2024/12/22/ctf-2024-review/"/>
    <url>/2024/12/22/ctf-2024-review/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次赛题感觉整体难度不高，不会或者不了解的地方上网搜搜很快就能学会，答出大部分题应该是足够了。</p><p>本文中使用的代码均为 ChatGPT 生成。</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="welcome-pwn"><a href="#welcome-pwn" class="headerlink" title="welcome_pwn"></a>welcome_pwn</h3><p>题面：”你听说过a[-1]吗”</p><p>下载附件后使用 IDA 进行反编译，发现 <code>main</code> 函数中有一个 10 次的循环。</p><figure><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 简化的 main() 函数</span><span class="token punctuation">&#123;</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"let us play a game!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>进入 <code>game</code> 函数，可以看到程序判断对应数组下标的值是否正确，如正确则计数，如错误则赋值。<br>然而要触发 <code>sh</code> 命令，需要计数大于 10，按正常逻辑无法做到。</p><figure><div class="code-wrapper"><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 简化的 game() 函数</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"input the index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"input the result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> pp<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">==</span> v2 <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"right!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>coins<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pp<span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> v2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> coins <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"wow you are so good!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>点击 <code>pp</code> 数组，发现其内存地址为 <code>201040</code>，而 <code>coin</code> 的地址为 <code>20103C</code>，刚好差距 4 字节。<br>结合题面，我们不难想到通过 <code>pp[-1]</code> 修改 <code>coin</code> 的值，从而激活终端。</p><p>连接容器，输入 <code>index</code> 为 -1，<code>result</code> 为大于 10 的数，即可进入终端，输入 <code>cat /flag</code> 即可得到 flag.</p><h3 id="ret2libc-32"><a href="#ret2libc-32" class="headerlink" title="ret2libc_32"></a>ret2libc_32</h3><p>这题难度较高，可能是题库中最难的。</p><p>但是这题可以在网上搜到原题和题解，所以难度大大下降。</p><p>具体解法可参考下列链接，本文不再赘述。</p><p><a href="https://blog.csdn.net/Bossfrank/article/details/134872403">pwn入门：基本栈溢出之ret2libc详解（以32位+64位程序为例）</a></p><p><a href="https://blog.csdn.net/Myon5/article/details/138815469">CTFshow-PWN-栈溢出（pwn45）</a></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="水题"><a href="#水题" class="headerlink" title="水题"></a>水题</h3><p>密码题大部分送分，水题统一写这里。</p><ul><li>简单签到题：摩斯密码</li><li>古典密码：W 型栅栏密码</li><li>真签到题：Ook 密码</li><li>caesar：凯撒密码</li><li>密码题：培根密码</li><li>Base 家族：Base64 解完再解 Base32</li></ul><p>基本找个在线工具丢进去就出来了。</p><h3 id="MiniRSA"><a href="#MiniRSA" class="headerlink" title="MiniRSA"></a>MiniRSA</h3><p>题目给出公钥 n &#x3D; 15，e &#x3D; 3，密文 c &#x3D; 3.</p><p>丢给 GPT 算出明文 m &#x3D; 12.</p><h3 id="basicRSA"><a href="#basicRSA" class="headerlink" title="basicRSA"></a>basicRSA</h3><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> gcd<span class="token punctuation">,</span> invert<span class="token punctuation">,</span> powmod<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long<span class="token punctuation">,</span> long_to_bytes<span class="token comment"># 已知参数 e p q c</span>e <span class="token operator">=</span> p <span class="token operator">=</span> q <span class="token operator">=</span> n <span class="token operator">=</span> p <span class="token operator">*</span> qc <span class="token operator">=</span> <span class="token comment"># 计算 phi(n)</span>phi_n <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 计算私钥 d</span>d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span><span class="token comment"># 解密密文</span>m <span class="token operator">=</span> powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment"># 转换回 flag</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre></div></figure><h3 id="键盘加密"><a href="#键盘加密" class="headerlink" title="键盘加密"></a>键盘加密</h3><figure><div class="code-wrapper"><pre class="language-text" data-language="text"><code class="language-text">74 81 43 62 41 32 73</code></pre></div></figure><p>打开手机九键键盘，每组第一个数字对应九键，第二个数字对应键中具体的字母。</p><p>得到 <code>stinger</code> 即为 flag.</p><h3 id="真的是md5？"><a href="#真的是md5？" class="headerlink" title="真的是md5？"></a>真的是md5？</h3><figure><div class="code-wrapper"><pre class="language-text" data-language="text"><code class="language-text">剔除前：bci177a7a9c7udf69c248647b4dfc6fd84o剔除后：bc177a7a9c7df69c248647b4dfc6fd84</code></pre></div></figure><p>题目给的密文包含 md5 以外的字符，先把这些字符剔除，然后<a href="https://www.cmd5.com/">反向查询</a>明文。</p><p>得 <code>666666666666</code> 即为 flag.</p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>这题中 n 是一个素数，所以可以直接用 <code>n-1</code> 作为 <code>phi(n)</code>.</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> sympy <span class="token keyword">import</span> mod_inverse<span class="token comment"># 已知的参数</span>n <span class="token operator">=</span>e <span class="token operator">=</span>c <span class="token operator">=</span><span class="token comment"># 计算私钥 d</span>d <span class="token operator">=</span> mod_inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 解密密文</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment"># 转换为字节</span>flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Flag:"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span></code></pre></div></figure><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="你真的看不见吗"><a href="#你真的看不见吗" class="headerlink" title="你真的看不见吗"></a>你真的看不见吗</h3><p>Word 文档隐写题。</p><p>忘了怎么做的了，好像随便输几个字然后改改属性就出来了。</p><h3 id="压缩包怎么还要密码"><a href="#压缩包怎么还要密码" class="headerlink" title="压缩包怎么还要密码"></a>压缩包怎么还要密码</h3><p>得到一个带密码的压缩包，题目提示密码是学长生日。</p><p>暴力破解，从 20000101 到 20240101，可得学长生日为 20040915.</p><h3 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h3><p>直接打开会发现图片显示不全，用 Stegsolve 打开就能看到二维码。</p><p>打开 Frame Browser，依次识别 18 张二维码，连起来即可得到 flag.</p><h3 id="图片题"><a href="#图片题" class="headerlink" title="图片题"></a>图片题</h3><p>使用十六进制编辑器打开，发现图片中藏了 XML 文本，格式化后即可找到 flag.</p><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><p>题目给出 Wireshark 抓包记录，打开后筛选 Http 层，搜索 POST 方法，查看内容即可看到密码。</p><h3 id="图片好像不完整"><a href="#图片好像不完整" class="headerlink" title="图片好像不完整"></a>图片好像不完整</h3><p>打开图片发现龙舟图片不完整，用 tweakPNG 打开提示 CRC 错误。</p><p>于是编写脚本从 CRC 反推图片大小。</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zlib<span class="token keyword">import</span> struct<span class="token keyword">import</span> itertoolsbin_data <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"龙舟.png"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>original_crc32 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>bin_data<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment"># 原始crc</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4095</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4095</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>data <span class="token operator">=</span> bin_data<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">+</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> bin_data<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span>crc32 <span class="token operator">=</span> zlib<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>crc32 <span class="token operator">==</span> original_crc32<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"宽度: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">, hex: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"高度: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">, hex: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre></div></figure><p>运行脚本后得图片实际高度应为 500，用 tweakPNG 重新修改图片大小，打开即可得到 flag.</p><h3 id="又是图片"><a href="#又是图片" class="headerlink" title="又是图片"></a>又是图片</h3><p>图片属性中有一串盲文，翻译后即可得 flag.</p><h3 id="你使用过StegSolve吗？"><a href="#你使用过StegSolve吗？" class="headerlink" title="你使用过StegSolve吗？"></a>你使用过StegSolve吗？</h3><p>使用 StegSolve 打开图片，打开 Data Extract 窗口，</p><p>勾选 <code>R0 B0 G0</code> 三个通道，<code>Bit Order</code> 选择 <code>LSB First</code>，</p><p>提取数据，发现数据头有 <code>PNG</code> 字样，保存为 png 文件，可以发现是张二维码，解析即可得 flag.</p><h3 id="图片怎么打不开"><a href="#图片怎么打不开" class="headerlink" title="图片怎么打不开"></a>图片怎么打不开</h3><p>用十六进制编辑器打开，发现文件尾有 <code>GNP</code> 字样，编写程序读取二进制数据并反转输出，打开图片即可得 flag.</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string inputFilename <span class="token operator">=</span> <span class="token string">"1.png"</span><span class="token punctuation">;</span>    string outputFilename <span class="token operator">=</span> <span class="token string">"2.png"</span><span class="token punctuation">;</span>    <span class="token comment">// 打开输入文件</span>    ifstream <span class="token function">inputFile</span><span class="token punctuation">(</span>inputFilename<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inputFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Error: Could not open input file "</span> <span class="token operator">&lt;&lt;</span> inputFilename <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取二进制数据到缓冲区</span>    vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">istreambuf_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>inputFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token generic-function"><span class="token function">istreambuf_iterator</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inputFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反转数据</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打开输出文件</span>    ofstream <span class="token function">outputFile</span><span class="token punctuation">(</span>outputFilename<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>outputFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Error: Could not open output file "</span> <span class="token operator">&lt;&lt;</span> outputFilename <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 写入反转后的数据到输出文件</span>    outputFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="社工题"><a href="#社工题" class="headerlink" title="社工题"></a>社工题</h3><p>将酒店图片左右翻转，在镜子反光中看到 <code>Transcendence Resort</code> 字样，百度搜索即可得到答案 <code>青城山心越酒店</code>。</p><h3 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h3><p>这题真有点绕，硬控了我两小时。</p><p>下载附件得到 <code>._none.zip</code> 和 <code>none.zip</code> 两个文件，其中 <code>._none.zip</code> 没什么用。</p><p>解压 <code>none.zip</code>，得到 <code>woo.jpg</code> 和 <code>res.zip</code> 两个文件，<code>res.zip</code> 被密码加密，其中有 <code>flag.txt</code> 和 <code>secret.txt</code> 两个文件。</p><p>用十六进制编辑器打开 <code>woo.jpg</code>，在文件尾部找到 Zip 文件尾 <code>50 4B 05 06</code>，向前搜索 <code>03 04</code>，发现前四位被 <code>32 32</code> 覆盖。</p><p>修改 <code>32 32 03 04</code> 为 <code>50 4B 03 04</code>，即可修复 Zip 文件头。</p><p>使用 <code>binwalk</code> 工具拆分文件，得到一个包含 <code>flag.txt</code> 的压缩包，并且这个压缩包没有密码。</p><p>查看 CRC 可以发现这个压缩包中的 <code>flag.txt</code> 与 <code>res.zip</code> 中的完全一致，故用明文攻击即可破解压缩包。</p><p>破解完打开 <code>secret.txt</code> 即可获得 flag.</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="easyweb1"><a href="#easyweb1" class="headerlink" title="easyweb1"></a>easyweb1</h3><p>查看 HTML 源码即可得 flag.</p><h3 id="easyweb2"><a href="#easyweb2" class="headerlink" title="easyweb2"></a>easyweb2</h3><p>直接打开容器，未发现有效信息，HTML 源码提示我们寻找其他文件。</p><p>使用 dirsearch 工具进行扫描，发现根目录下有 <code>robot.txt</code>，用浏览器访问即可得 flag.</p><h3 id="easyweb3"><a href="#easyweb3" class="headerlink" title="easyweb3"></a>easyweb3</h3><p>进入容器可以看到 PHP 脚本，可知要绕过数字判断并使 <code>$a == 404</code> 成立。</p><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'start'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'start'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">//这里要怎么绕过呢？</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"can't be number&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Right!&lt;/br>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string double-quoted-string">"Stinger666"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'bash'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'bash'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre></div></figure><p>设置 <code>start</code> 为 <code>404\0</code>，即可绕过判断，使用 curl 发送请求即可运行指令。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--location</span> <span class="token parameter variable">--request</span> POST <span class="token string">'https://xxx.stinger.team/?start=404%00&amp;password=Stinger666'</span> <span class="token parameter variable">--form</span> <span class="token string">'bash="cat /flag"'</span></code></pre></div></figure><h3 id="easyweb4"><a href="#easyweb4" class="headerlink" title="easyweb4"></a>easyweb4</h3><p>没做出来，这个是真不会，</p><p>给 CTF 佬跪辣。</p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>CTF</tag>
      
      <tag>比赛</tag>
      
      <tag>题解</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 盲点笔记（二）之 C 字符串</title>
    <link href="/2024/11/12/cpp-note-ep2/"/>
    <url>/2024/11/12/cpp-note-ep2/</url>
    
    <content type="html"><![CDATA[<h2 id="C-字符串"><a href="#C-字符串" class="headerlink" title="C 字符串"></a>C 字符串</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>C 语言没有单独的字符串类型，字符串被当作字符数组，即<code>char[]</code>.</p><p>字符串变量可以声明成一个字符数组，也可以声明成一个指针，指向一个字符数组。</p><p>所有字符串都以<code>\0</code>结束。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 以下三种写法等价</span><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'H'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'\0'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> s3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token comment">// 用指针指向字符数组常量</span><span class="token keyword">char</span><span class="token operator">*</span> s4 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span></code></pre></div></figure><p>若字符数组长度大于字符串长度，则会用<code>\0</code>填充剩余的空间。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 从 s[6] 到 s[9] 均为 '\0'</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span> </code></pre></div></figure><p>C 语言允许合并多个字符串字面量，如果这些字符串之间只有空格或换行，C 语言会将它们自动合并。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> greeting<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello, "</span>   <span class="token string">"how are you "</span>    <span class="token string">"today!"</span><span class="token punctuation">;</span><span class="token comment">// 等同于</span><span class="token keyword">char</span> greeting<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello, how are you today!"</span><span class="token punctuation">;</span></code></pre></div></figure><p>对于已经定义的字符数组，我们不能直接使用赋值运算符进行整体赋值，而是必须使用 C 语言提供的<code>strcpy()</code>函数。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>str <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>  <span class="token comment">// 错误：数组名是常量指针，不能作为赋值操作的左值</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 正确</span></code></pre></div></figure><p>若使用指针变量，则可以直接指向字符串常量或字符数组：</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span> <span class="token comment">// 指向字符串常量</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'z'</span><span class="token punctuation">;</span>  <span class="token comment">// 错误：常量不能修改</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span>p <span class="token operator">=</span> str<span class="token punctuation">;</span> <span class="token comment">// 指向现有的字符数组</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'z'</span><span class="token punctuation">;</span> <span class="token comment">// 合法，等价于 str[3] = 'z'</span></code></pre></div></figure><h3 id="strlen-函数"><a href="#strlen-函数" class="headerlink" title="strlen() 函数"></a>strlen() 函数</h3><p><code>strlen()</code>函数返回字符串的字节长度，不包括末尾的空字符<code>\0</code>.</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// string.h</span>size_t <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></figure><p>它的参数是字符串变量，返回的是<code>size_t</code>类型的无符号整数，除非是极长的字符串，一般情况下当作<code>int</code>处理即可。</p><p>注意，字符串长度<code>strlen()</code>与字符数组长度<code>sizeof()</code>是两个不同的概念。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello\0world12"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 5</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 7</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 50</span></code></pre></div></figure><h3 id="strcpy-函数"><a href="#strcpy-函数" class="headerlink" title="strcpy() 函数"></a>strcpy() 函数</h3><p><code>strcpy()</code>函数用于将一个字符串复制到一个字符数组中。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// string.h</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></figure><p><code>strcpy()</code>的返回值是一个字符串指针，指向第一个参数，故可以连续为多个字符数组赋值。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello, I'm C0dd1y"</span><span class="token punctuation">;</span><span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"C0dd1y"</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token function">strcpy</span><span class="token punctuation">(</span>str1 <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"SugarMGP"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// Hello, I'm SugarMGP</span>cout <span class="token operator">&lt;&lt;</span> str2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// SugarMGP</span></code></pre></div></figure><p>另外，不能使用<code>strcpy()</code>对没初始化的字符指针赋值。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">;</span> <span class="token comment">// 未初始化，指向随机位置</span><span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span></code></pre></div></figure><p>程C老师给我们写的神金示例，好孩子千万不要这样写码哦：</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"apple***\0s1234567"</span><span class="token punctuation">;</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// apple***</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token operator">+</span><span class="token number">9</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// s1234567</span><span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// abc\0e***\0s1234567</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// abc</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token operator">+</span><span class="token number">4</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// e***</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token operator">+</span><span class="token number">9</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// s1234567</span></code></pre></div></figure><h3 id="strcat-函数"><a href="#strcat-函数" class="headerlink" title="strcat() 函数"></a>strcat() 函数</h3><p><code>strcat()</code>函数用于将一个字符串追加到另一个字符串的末尾。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// string.h</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></figure><p><code>strcat()</code>的返回值是一个字符串指针，同样指向第一个参数。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span class="token function">strcat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token function">strcat</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token string">", SugarMGP"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "helloworld, SugarMGP"</span></code></pre></div></figure><p>同样也举个神金示例：</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"apple***\0s1234567"</span><span class="token punctuation">;</span><span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// apple***</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token operator">+</span><span class="token number">9</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// s1234567</span><span class="token function">strcat</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// apple***abc\034567\0</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// apple***abc</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token operator">+</span><span class="token number">12</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 34567</span><span class="token function">strcat</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// apple***abc\034567abc\0</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// apple***abc</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token operator">+</span><span class="token number">12</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 34567abc</span></code></pre></div></figure><h3 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp() 函数"></a>strcmp() 函数</h3><p><code>strcmp()</code>函数用于比较两个字符串的内容。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// string.h</span><span class="token keyword">int</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></figure><p>按照字典顺序，若<code>s1</code>小于<code>s2</code>，则返回负值；若<code>s1</code>大于<code>s2</code>，则返回正值；若<code>s1</code>等于<code>s2</code>，则返回零。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// s1 = Happy New Year</span><span class="token comment">// s2 = Happy New Year</span><span class="token comment">// s3 = Happy Holidays</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// 0</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s3<span class="token punctuation">)</span> <span class="token comment">// 正值 ('N'>'H')</span></code></pre></div></figure><h3 id="strchr-和-strstr"><a href="#strchr-和-strstr" class="headerlink" title="strchr() 和 strstr()"></a>strchr() 和 strstr()</h3><p><code>strchr()</code>函数用于在字符串中查找某个字符，并返回该字符第一次出现的位置。</p><p><code>strstr()</code>函数用于在字符串中查找另一个字符串的第一次出现的位置。</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token function">strchr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> p <span class="token operator">-</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 得到'l'第一次出现的下标为 2</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">*</span> q <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> q <span class="token operator">-</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 得到'world'第一次出现的下标为 7</span><span class="token punctuation">&#125;</span></code></pre></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>笔记</tag>
      
      <tag>字符串</tag>
      
      <tag>字符数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 盲点笔记（一）</title>
    <link href="/2024/11/07/cpp-note-ep1/"/>
    <url>/2024/11/07/cpp-note-ep1/</url>
    
    <content type="html"><![CDATA[<h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table><thead><tr><th>转义字符</th><th>含义</th><th>ASCII码值</th></tr></thead><tbody><tr><td>\0</td><td>空字符（字符串的结束标志）</td><td>0</td></tr><tr><td>\a</td><td>响铃（错误音效）</td><td>7</td></tr><tr><td>\t</td><td>水平制表符</td><td>9</td></tr><tr><td>\n</td><td>换行符</td><td>10</td></tr><tr><td>\“</td><td>双引号</td><td>34</td></tr><tr><td>\‘</td><td>单引号</td><td>39</td></tr><tr><td>\\</td><td>反斜杠</td><td>92</td></tr><tr><td>\ddd</td><td>八进制表示的字符</td><td>*</td></tr><tr><td>\xhh</td><td>十六进制表示的字符</td><td>*</td></tr></tbody></table><p>例：</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token char">'\043'</span> <span class="token operator">-></span> 八进制为<span class="token number">43</span>的字符 <span class="token operator">-></span> 十进制为<span class="token number">35</span>的字符 <span class="token operator">-></span> <span class="token char">'#'</span><span class="token char">'\x43'</span> <span class="token operator">-></span> 十六进制为<span class="token number">43</span>的字符 <span class="token operator">-></span> 十进制为<span class="token number">67</span>的字符 <span class="token operator">-></span> <span class="token char">'C'</span></code></pre></div></figure><h3 id="ASCII-码"><a href="#ASCII-码" class="headerlink" title="ASCII 码"></a>ASCII 码</h3><p>大致顺序：数字 -&gt; 大写字母 -&gt; 小写字母</p><p><strong>‘0’</strong> (48) - <strong>‘9’</strong> (57)</p><p><strong>‘A’</strong> (65) - <strong>‘Z’</strong> (90)</p><p><strong>‘a’</strong> (97) - <strong>‘z’</strong> (122)</p><p>完整码表请参考：<a href="https://www.runoob.com/w3cnote/ascii.html">ASCII 表</a></p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="getchar-函数"><a href="#getchar-函数" class="headerlink" title="getchar() 函数"></a>getchar() 函数</h3><p><code>getchar()</code> 用于读取下一个可用的字符，并将其<strong>作为整数</strong>返回。</p><p>如果读到文件结束或者发生读取错误，则返回 <strong>EOF</strong> (-1).</p><p>常用方法：</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 一些操作</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="gets-函数"><a href="#gets-函数" class="headerlink" title="gets() 函数"></a>gets() 函数</h3><p><code>gets()</code> 用于读取一行字符串，并将读取的字符存储到指定的字符数组中。</p><p>换行符 <code>\n</code> 不会被存储到数组中，但在读取过程中会被消耗掉。读取完成后，会在数组末尾添加一个空字符 <code>\0</code> 以终止字符串。</p><p>如果遇到文件结束符或读取错误，返回 <strong>NULL</strong>.</p><p>常用方法：</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 一些操作</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="cin-语句"><a href="#cin-语句" class="headerlink" title="cin 语句"></a>cin 语句</h3><p><code>cin</code> 语句用于读取输入，并将其转换为指定类型的值。</p><p>若缓冲区中第一个字符是分隔符，<code>cin</code> 会将其忽略并清除，继续读取下一个字符，</p><p>但是如果读取成功，字符后面的分隔符是残留在缓冲区的，<code>cin</code> 不做处理。</p><p>常用方法：</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 一些操作</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="cin-getline-函数"><a href="#cin-getline-函数" class="headerlink" title="cin.getline() 函数"></a>cin.getline() 函数</h3><p>类似于<code>gets()</code>.</p><p>常用方法：</p><figure><div class="code-wrapper"><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认以'\0'为截止符</span>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以'a'为截止符</span></code></pre></div></figure><h3 id="cout-常用控制符"><a href="#cout-常用控制符" class="headerlink" title="cout 常用控制符"></a>cout 常用控制符</h3><table><thead><tr><th>控制符</th><th>功能</th></tr></thead><tbody><tr><td>*dec</td><td>十进制输出</td></tr><tr><td>hex</td><td>十六进制输出</td></tr><tr><td>oct</td><td>八进制输出</td></tr><tr><td>setprecision(n)</td><td>设置实数的精度</td></tr><tr><td>setbase(n)</td><td>设置整数的基数(只能为 8, 10 或 16)</td></tr><tr><td>setfill(c)</td><td>设置填充字符</td></tr><tr><td>setw(n)</td><td>设置字段宽度</td></tr><tr><td>boolalpha</td><td>把 true 和 false 输出为字符串</td></tr><tr><td>*noboolalpha</td><td>把 true 和 false 输出为数字</td></tr><tr><td>left</td><td>左对齐输出</td></tr><tr><td>*right</td><td>右对齐输出</td></tr><tr><td>internal</td><td>内部对齐输出</td></tr><tr><td>fixed</td><td>固定小数位数输出</td></tr><tr><td>scientific</td><td>科学计数法输出</td></tr><tr><td>endl</td><td>换行并刷新缓冲区</td></tr></tbody></table><p>注意：</p><ul><li>带<code>*</code>的控制符表示默认生效。</li><li><code>setw</code> 只对<strong>其后的第一个输出项</strong>有效。</li><li><code>internal</code> 指<strong>符号位左对齐</strong>，<strong>数值右对齐</strong>，中间由填充字符填充。</li><li><code>setprecision</code> 默认代表<strong>有效数字</strong>，在以 <code>fixed</code> 和 <code>scientific</code> 形式输出时代表<strong>小数位数</strong>。</li><li><code>endl</code> 不是一个字符，它等价于 <code>putchar(&#39;\n&#39;)</code> 和 <code>fflush(stdout)</code>.</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>笔记</tag>
      
      <tag>输入输出</tag>
      
      <tag>字符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Zap 实现高性能日志记录</title>
    <link href="/2024/10/24/zap/"/>
    <url>/2024/10/24/zap/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>Zap</strong> 是一款由 uber-go 开发的开源日志库，它支持多种日志级别和结构化，并对性能和内存分配做了极致的优化。</p><p>试用期大作业的后端中我们使用了 Zap 来进行日志记录，今日探索日志滚动时顺带回顾了一下 Zap 的基本用法，于是决定水一篇博客（逃</p><p>项目地址：<a href="https://github.com/uber-go/zap">https://github.com/uber-go/zap</a></p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> go.uber.org/zap</code></pre></div></figure><p>Zap 库的使用与其他的日志库非常相似，我们需要先创建一个日志记录器，然后调用相应的方法来记录不同级别的日志。</p><p>Zap 提供了两种日志记录器：<code>Sugared Logger</code> 和 <code>Logger</code>.</p><ul><li><p><code>Sugared Logger</code> 并重性能与易用性，支持<strong>结构化和 printf 风格</strong>的日志记录。</p></li><li><p><code>Logger</code> 非常强调性能，不提供 printf 风格的 api，<strong>只支持强类型的、结构化的</strong>日志记录。</p></li></ul><p>举例如下：</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Sugared Logger</span>    sugar <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sugar<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"hello! name:%s,age:%d"</span><span class="token punctuation">,</span> <span class="token string">"xiaomin"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// printf 风格</span>    <span class="token comment">// Logger</span>    logger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">,</span> zap<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"xiaomin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zap<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 结构化</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>输出结果：</p><figure><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// output</span><span class="token punctuation">&#123;</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"hello! name:xiaomin,age:20"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"hello!"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"xiaomin"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>要创建一个 Logger，Zap 提供了三个默认配置：<code>Example</code>，<code>Development</code>，<code>Production</code>，分别对应测试环境、开发环境和生产环境。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Example</span>   logger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Example"</span><span class="token punctuation">)</span>   <span class="token comment">// Development</span>   logger<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> zap<span class="token punctuation">.</span><span class="token function">NewDevelopment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Development"</span><span class="token punctuation">)</span>   <span class="token comment">// Production</span>   logger<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> zap<span class="token punctuation">.</span><span class="token function">NewProduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Production"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>相应的输出如下：</p><figure><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token comment">// Example</span><span class="token punctuation">&#123;</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"Example"</span><span class="token punctuation">&#125;</span><span class="token comment">// Development</span><span class="token number">2024</span><span class="token number">-10</span>-24T22<span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">16.544</span>+<span class="token number">0800</span>    INFO    ConfessionWallServer/main.go<span class="token operator">:</span><span class="token number">14</span> Development<span class="token comment">// Production</span><span class="token punctuation">&#123;</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token number">1729781536.5583117</span><span class="token punctuation">,</span><span class="token property">"caller"</span><span class="token operator">:</span><span class="token string">"ConfessionWallServer/main.go:18"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"Production"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>可以看到，日志等级，日志输出格式，默认字段都有所差异。</p><h2 id="定制-Logger"><a href="#定制-Logger" class="headerlink" title="定制 Logger"></a>定制 Logger</h2><p>Zap 提供了丰富的配置选项。</p><h3 id="使用自定义配置"><a href="#使用自定义配置" class="headerlink" title="使用自定义配置"></a>使用自定义配置</h3><p>我们可以通过自己创建 Config 来配置 Logger 的行为。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定制 Config</span>    config <span class="token operator">:=</span> zap<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span>        Level<span class="token punctuation">:</span>       zap<span class="token punctuation">.</span><span class="token function">NewAtomicLevelAt</span><span class="token punctuation">(</span>zap<span class="token punctuation">.</span>InfoLevel<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 最低日志等级</span>        Encoding<span class="token punctuation">:</span>    <span class="token string">"json"</span><span class="token punctuation">,</span> <span class="token comment">// 日志输出格式</span>        EncoderConfig<span class="token punctuation">:</span> zap<span class="token punctuation">.</span>EncoderConfig<span class="token punctuation">&#123;</span>            TimeKey<span class="token punctuation">:</span>        <span class="token string">"time"</span><span class="token punctuation">,</span> <span class="token comment">// 时间字段名</span>            LevelKey<span class="token punctuation">:</span>       <span class="token string">"level"</span><span class="token punctuation">,</span> <span class="token comment">// 日志等级字段名</span>            NameKey<span class="token punctuation">:</span>        <span class="token string">"logger"</span><span class="token punctuation">,</span> <span class="token comment">// 日志名字段名</span>            CallerKey<span class="token punctuation">:</span>      <span class="token string">"caller"</span><span class="token punctuation">,</span> <span class="token comment">// 调用者字段名</span>            MessageKey<span class="token punctuation">:</span>     <span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token comment">// 消息字段名</span>            StacktraceKey<span class="token punctuation">:</span>  <span class="token string">"stacktrace"</span><span class="token punctuation">,</span> <span class="token comment">// 堆栈字段名</span>            LineEnding<span class="token punctuation">:</span>     zapcore<span class="token punctuation">.</span>DefaultLineEnding<span class="token punctuation">,</span>            EncodeLevel<span class="token punctuation">:</span>    zapcore<span class="token punctuation">.</span>LowercaseLevelEncoder<span class="token punctuation">,</span>            EncodeTime<span class="token punctuation">:</span>     zapcore<span class="token punctuation">.</span>ISO8601TimeEncoder<span class="token punctuation">,</span>            EncodeDuration<span class="token punctuation">:</span> zapcore<span class="token punctuation">.</span>SecondsDurationEncoder<span class="token punctuation">,</span>            EncodeCaller<span class="token punctuation">:</span>   zapcore<span class="token punctuation">.</span>ShortCallerEncoder<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        OutputPaths<span class="token punctuation">:</span>      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"stdout"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 日志输出路径</span>        ErrorOutputPaths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"stderr"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 错误日志输出路径</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 通过 Config 构建 Logger</span>    logger<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> config<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 在程序结束时同步缓冲区</span>    <span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 记录日志</span>    logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">,</span> zap<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"xiaomin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zap<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="记录调用信息"><a href="#记录调用信息" class="headerlink" title="记录调用信息"></a>记录调用信息</h3><p>Zap 提供了 <code>AddCaller()</code> 方法，可以记录调用者的信息，包括文件名、函数名、行号。<br>前提是必须设置 <code>CallerKey</code> 字段，因此 NewExample() 不能输出调用者信息。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  logger<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewProduction</span><span class="token punctuation">(</span>zap<span class="token punctuation">.</span><span class="token function">AddCaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>输出结果：</p><figure><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token number">1587740198.9508286</span><span class="token punctuation">,</span><span class="token property">"caller"</span><span class="token operator">:</span><span class="token string">"caller/main.go:9"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"hello world"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>有时我们稍微封装了一下记录日志的方法，但是我们希望输出的文件名和行号是调用封装函数的位置，这时可以使用 <code>zap.AddCallerSkip(skip int)</code> 向上跳过：</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Output</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token operator">...</span>zap<span class="token punctuation">.</span>Field<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  zap<span class="token punctuation">.</span><span class="token function">L</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> fields<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  logger<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewProduction</span><span class="token punctuation">(</span>zap<span class="token punctuation">.</span><span class="token function">AddCaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zap<span class="token punctuation">.</span><span class="token function">AddCallerSkip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  zap<span class="token punctuation">.</span><span class="token function">ReplaceGlobals</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>  <span class="token function">Output</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>输出结果：</p><figure><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token number">1587740501.5592482</span><span class="token punctuation">,</span><span class="token property">"caller"</span><span class="token operator">:</span><span class="token string">"skip/main.go:15"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"hello world"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h3 id="记录堆栈信息"><a href="#记录堆栈信息" class="headerlink" title="记录堆栈信息"></a>记录堆栈信息</h3><p>Zap 提供了 <code>AddStacktrace()</code> 方法，可以记录堆栈信息。<br>前提是必须设置 <code>StacktraceKey</code> 字段，因此 NewExample() 不能输出堆栈信息。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">f2</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">,</span> fields <span class="token operator">...</span>zap<span class="token punctuation">.</span>Field<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  zap<span class="token punctuation">.</span><span class="token function">L</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> fields<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  logger<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewProduction</span><span class="token punctuation">(</span>zap<span class="token punctuation">.</span><span class="token function">AddStacktrace</span><span class="token punctuation">(</span>zapcore<span class="token punctuation">.</span>WarnLevel<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  zap<span class="token punctuation">.</span><span class="token function">ReplaceGlobals</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>  <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>将 <code>zapcore.WarnLevel</code> 传入 <code>AddStacktrace()</code>，之后 Warn 和 Error 级别的日志会输出堆栈，Debug 和 Info 则不会。</p><p>运行结果：</p><figure><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token string">"warn"</span><span class="token punctuation">,</span><span class="token property">"ts"</span><span class="token operator">:</span><span class="token number">1729783529.2137501</span><span class="token punctuation">,</span><span class="token property">"caller"</span><span class="token operator">:</span><span class="token string">"ConfessionWallServer/main.go:13"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"hello world"</span><span class="token punctuation">,</span><span class="token property">"stacktrace"</span><span class="token operator">:</span><span class="token string">"main.f2\n\tD:/07_Github/ConfessionWallServer/main.go:13\nmain.f1\n\tD:/07_Github/ConfessionWallServer/main.go:9\nmain.main\n\tD:/07_Github/ConfessionWallServer/main.go:22\nruntime.main\n\tC:/Program Files/Go/src/runtime/proc.go:272"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>将 <code>stacktrace</code> 单独拉出来看：</p><figure><div class="code-wrapper"><pre class="language-log" data-language="log"><code class="language-log"><span class="token domain constant">main.f2</span><span class="token file-path string">D:/07_Github/ConfessionWallServer/main.go</span><span class="token operator">:</span><span class="token number">13</span>    <span class="token domain constant">main.f1</span>    <span class="token file-path string">D:/07_Github/ConfessionWallServer/main.go</span><span class="token operator">:</span><span class="token number">9</span>        <span class="token domain constant">main.main</span>        <span class="token file-path string">D:/07_Github/ConfessionWallServer/main.go</span><span class="token operator">:</span><span class="token number">22</span>            <span class="token domain constant">runtime.main</span>            <span class="token file-path string">C:/Program</span> Files<span class="token operator">/</span>Go<span class="token operator">/</span>src<span class="token operator">/</span>runtime<span class="token operator">/</span>proc<span class="token punctuation">.</span>go<span class="token operator">:</span><span class="token number">272</span></code></pre></div></figure><p>我们很清楚地看到调用路径。</p><h3 id="预设日志字段"><a href="#预设日志字段" class="headerlink" title="预设日志字段"></a>预设日志字段</h3><p>有些时候我们需要在每条日志中添加一些预设字段，可以通过 <code>zap.Fields(fs ...Field)</code> 来实现。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  logger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewExample</span><span class="token punctuation">(</span>zap<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span>    zap<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">"serverId"</span><span class="token punctuation">,</span> <span class="token number">114514</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    zap<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"serverName"</span><span class="token punctuation">,</span> <span class="token string">"ConfessionWallServer"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span>  logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>输出：</p><figure><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"hello world"</span><span class="token punctuation">,</span><span class="token property">"serverId"</span><span class="token operator">:</span><span class="token number">114514</span><span class="token punctuation">,</span><span class="token property">"serverName"</span><span class="token operator">:</span><span class="token string">"ConfessionWallServer"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="设置全局-Logger"><a href="#设置全局-Logger" class="headerlink" title="设置全局 Logger"></a>设置全局 Logger</h2><p>为了方便使用，Zap 提供了 <code>ReplaceGlobals(logger *Logger)</code>，可以将一个 Logger 设置为全局的 Logger。<br><code>zap.L()</code> 获取全局 Logger，<code>zap.S()</code> 获取全局 Sugared Logger。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  logger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">NewExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> logger<span class="token punctuation">.</span><span class="token function">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  zap<span class="token punctuation">.</span><span class="token function">ReplaceGlobals</span><span class="token punctuation">(</span>logger<span class="token punctuation">)</span>  zap<span class="token punctuation">.</span><span class="token function">L</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"Global Logger"</span><span class="token punctuation">)</span>  zap<span class="token punctuation">.</span><span class="token function">S</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Global %s"</span><span class="token punctuation">,</span> <span class="token string">"Sugared Logger"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>输出：</p><figure><div class="code-wrapper"><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"Global Logger"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token property">"level"</span><span class="token operator">:</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token property">"msg"</span><span class="token operator">:</span><span class="token string">"Global Sugared Logger"</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>注意：若没有设置全局 Logger，则调用 <code>zap.L()</code> 和 <code>zap.S()</code> 并不会有日志输出。</p><h2 id="实现日志滚动"><a href="#实现日志滚动" class="headerlink" title="实现日志滚动"></a>实现日志滚动</h2><p><strong>lumberjack</strong> 是一个高效且易用的日志滚动包，它允许开发人员将日志写入自动滚动的文件中，从而使日志管理更加简单。</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/natefinch/lumberjack</code></pre></div></figure><p>lumberjack 提供了一个滚动记录器 logger，它实现了 <code>io.Writer</code> 和 <code>io.Closer</code> 接口，我们可以使用 <code>zapcore.AddSync</code> 来将其与 Zap 结合使用。</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    lumberJackLogger <span class="token operator">:=</span> <span class="token operator">&amp;</span>lumberjack<span class="token punctuation">.</span>Logger<span class="token punctuation">&#123;</span>        Filename<span class="token punctuation">:</span>   filename<span class="token punctuation">,</span>  <span class="token comment">// 文件路径</span>        MaxSize<span class="token punctuation">:</span>    maxsize<span class="token punctuation">,</span>   <span class="token comment">// 单个日志文件的最大大小（单位为MB）</span>        MaxAge<span class="token punctuation">:</span>     maxAge<span class="token punctuation">,</span>    <span class="token comment">// 保留旧文件的最大天数</span>        MaxBackups<span class="token punctuation">:</span> maxBackup<span class="token punctuation">,</span> <span class="token comment">// 保留旧文件的最大个数</span>        Compress<span class="token punctuation">:</span>   <span class="token boolean">false</span><span class="token punctuation">,</span>     <span class="token comment">// 是否压缩/归档旧文件</span>    <span class="token punctuation">&#125;</span>    core <span class="token operator">:=</span> zapcore<span class="token punctuation">.</span><span class="token function">NewCore</span><span class="token punctuation">(</span>        zapcore<span class="token punctuation">.</span><span class="token function">NewJSONEncoder</span><span class="token punctuation">(</span>zap<span class="token punctuation">.</span><span class="token function">NewDevelopmentEncoderConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        zapcore<span class="token punctuation">.</span><span class="token function">AddSync</span><span class="token punctuation">(</span>lumberJackLogger<span class="token punctuation">)</span><span class="token punctuation">,</span>        zapcore<span class="token punctuation">.</span>DebugLevel<span class="token punctuation">,</span>    <span class="token punctuation">)</span>    logger <span class="token operator">:=</span> zap<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>core<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>更多高级用法请参考 <a href="https://github.com/natefinch/lumberjack">Github 项目文档</a>，在此不多赘述。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>后端开发</tag>
      
      <tag>Zap</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Vercel 部署 Hexo 博客</title>
    <link href="/2024/10/20/blog-setup/"/>
    <url>/2024/10/20/blog-setup/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>Hexo</strong> 是一个快速、简洁且高效的博客框架，可以通过 Markdown（或其他渲染引擎）解析文章并生成静态网页。</p><p><strong>Vercel</strong> 是一家基于云的开发平台，提供免费的静态网站托管服务。</p><p>本文将介绍如何<strong>通过 Vercel 部署 Hexo 博客</strong>。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装 <a href="https://nodejs.org/zh-cn">Node.js</a> 和 <a href="https://git-scm.com/downloads">Git</a>，修改 NPM 为淘宝镜像源（可选）.</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改 NPM 为淘宝镜像源</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com</code></pre></div></figure><p>然后登录你的 Github 账号并创建一个新的公开仓库。</p><p>打开终端，输入以下两行代码来配置你的 Git：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"此处填写你的Github用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"此处填写你的Github绑定的邮箱"</span></code></pre></div></figure><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>新建一个文件夹作为你的博客文件的存放位置，点进去打开终端输入以下命令：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 Hexo</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span class="token comment"># 安装部署插件</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span class="token comment"># 初始化 Hexo 博客</span>hexo init<span class="token comment"># 安装博客所需要的依赖文件</span><span class="token function">npm</span> <span class="token function">install</span></code></pre></div></figure><p>等待运行完成，输入以下命令：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">hexo ghexo s</code></pre></div></figure><p>如果配置正确则会得到以下提示：</p><img src="/img/blog-setup/1.png"  width="500" /><p>打开浏览器访问 <code>http://localhost:4000</code> 即可看到你的 Hexo 博客页面，说明博客在本地运行成功。</p><h2 id="上传到-Github"><a href="#上传到-Github" class="headerlink" title="上传到 Github"></a>上传到 Github</h2><p>我们已经完成了 Hexo 的本地运行，接下来我们将本地博客上传到 Github 仓库进行托管。</p><p>首先打开终端，输入以下命令生成 SSH 密钥：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 输入后一直回车即可</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"Github绑定的邮箱地址"</span></code></pre></div></figure><p>打开 <code>%USERPROFILE%/.ssh</code> 文件夹，找到 <code>id_rsa.pub</code> 文件。</p><img src="/img/blog-setup/2.png"  width="500" /><p>打开这个文件并复制里面的内容，</p><p>然后打开 Github 的 <a href="https://github.com/settings/keys">SSH Keys 设置页</a>，点击 <code>New SSH Key</code> 按钮，将刚才复制的内容粘贴到 <code>Key</code>，并随便输入一个标题。</p><img src="/img/blog-setup/3.png"  width="600" /><p>回到终端输入<code>ssh -T git@github.com</code>，输入yes，出现<code>You’ve successfully …</code>的字样说明连接成功。</p><p>进入博客站点目录，打开<code>_config.yml</code>文件，找到<code>deploy</code>部分，修改成以下内容：</p><figure><div class="code-wrapper"><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>&lt;Github用户名<span class="token punctuation">></span>/&lt;仓库名<span class="token punctuation">></span>.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main</code></pre></div></figure><p>在博客站点目录下打开终端，输入<code>hexo g -d</code>，即可自动生成静态网页并上传到 Github 仓库。</p><h2 id="部署到-Vercel"><a href="#部署到-Vercel" class="headerlink" title="部署到 Vercel"></a>部署到 Vercel</h2><p>用 Github 账号登录 <a href="https://vercel.com/">Vercel</a>.</p><img src="/img/blog-setup/4.png"  width="350" /><p>点击 <code>Add New Project</code> 按钮，选择刚才上传的 Github 仓库并点击 <code>Import</code>，点击 <code>Deploy</code> 按钮，等待部署完成。</p><img src="/img/blog-setup/5.png"  width="450" /><img src="/img/blog-setup/7.png"  width="350" /><p>打开新建的 Project，点击 <code>Visit</code> 按钮，即可看到你的 Hexo 博客页面。</p><h2 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a>域名设置</h2><p>打开 Project Settings，点击 <code>Domains</code> 按钮，进入域名设置页面。</p><p>Vercel 给你默认分配了一个域名，你可以点击 <code>Edit</code> 按钮修改它：</p><img src="/img/blog-setup/8.png"  width="600" /><img src="/img/blog-setup/9.png"  width="600" /><p>如果需要绑定自己的域名，你可以输入自己的域名并点击 <code>Add</code> 按钮，</p><p>并打开域名服务商的 DNS 管理页面，将域名的 CNAME 记录指向 <code>vercel.cdn.yt-blog.top</code>（一个公益 Vercel CDN）.</p><img src="/img/blog-setup/10.png"  width="550" /><p>等待 DNS 解析生效，然后打开浏览器访问你的域名，即可看到你的 Hexo 博客页面。</p><h2 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h2><p>博客的配置文件位于博客站点目录下的 <code>_config.yml</code> 文件，你可以根据自己的需求修改以下内容：</p><img src="/img/blog-setup/11.png"  width="620" /><p>更多高级设置请参考 <a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Vercel</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/19/hello-world/"/>
    <url>/2024/10/19/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><blockquote><p>神说：「要有光！」于是就有了光。</p><p>望舒说：「要有博客！」于是我就搭建了一个博客</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
